import ipdb

from sqlalchemy import (create_engine, desc, func,
    CheckConstraint, PrimaryKeyConstraint, UniqueConstraint,ForeignKey,
    Index, Column, DateTime, Integer, String)
from sqlalchemy.orm import sessionmaker

from sqlalchemy.orm import declarative_base,relationship

import functools

Base = declarative_base()           #Allows classes to be mapped to tables when they are created

class Student(Base):
    __tablename__='students'

    __table_args__=(
        PrimaryKeyConstraint(
            'id',
            name='id_pk'
        ),
        UniqueConstraint(
            'name',
            name='unique_name'
        )
    ) 

    id = Column(Integer(),primary_key=True)
    name = Column(String())
    average_grade = Column(Integer())


    def __init__(self, name):
        self.name = name
        self.average_grade = 0
        self.scores = []

    def set_average_grade(self):
        avg = functools.reduce(sum, self.scores)    

class Assignment(Base):             #Creates an assignment class

    __tablename__='assignments'     #Creates a table (if it doesnt exist) called "assignments"

    __table_args__=(
        PrimaryKeyConstraint(       #Sets the id as the primary key
            'id',
            name='id_pk'
        ),
        UniqueConstraint(           #makes sure that class instances have a unique name
            'name',
            name='unique_name'
        )
    )

    id = Column(Integer(), primary_key=True)    #Creates a column with data containing the id of the Assignment (Autogenerated sequentially)
    name = Column(String())                     #Creates a column 'name' containing the name data of the object created
    grade = Column(Integer)                     #Creates a column 'grade containing the grade data of the object

    def __init__(self,name,category, grade):
        self.name=name
        self.category = category
        self.grade = grade

    #Ensure grade is not above 100:

    def get_grade(self):
        return self._grade
    
    def set_grade(self, value):
        if value > 100 or value < 0:
            print("Invalid Grade! Please enter a valid one")
        else:
            self._grade = value

    grade = property(fget=get_grade,fset=set_grade)        


wait = True

create_student = False

#while wait == True:

""" def check_input(task):
    if task == 1:
        print("Create A student")
        student_input = input("Enter Student Name")
        student_input = Student(student_input)
    elif task == 3:
        print("Create Assignment)

    else:
        print("Others pending")
 """

#check_input(task)

student_Kimani = Student("Kimani Mbatia")

assignment1 = Assignment("Vector Calculus", "Calc2", 76)

#Should this method be used????:

if __name__ =='__main__':
    engine = create_engine('sqlite:///students.db')
    Base.metadata.create_all(engine)

Session = sessionmaker(bind=engine)
session = Session()
#session.add(student_Kimani)
#session.add(assignment1)
#session.commit()

def createStudent():
    print("Welcome to the student creation page")
    name_input = input("Please type in the students name:")
    new_student_obj =Student(name_input)
    session.add(new_student_obj)
    session.commit()

def searchStudents():
    print("put in the name of the student you wish to search for")
    term = input()
    searchresp = session.query(Student).filter(Student.name == term).first()
    #searchresp = session.query(Student).filter(Student.name.like(term)).first()     #returns names in the table that are similar to the search term
    #print([searchresp for searchresp in searchresp])
    #for row in searchresp:
    #   print("\n",row)
    print("We Found:","\n","ID: ", searchresp.id , "Name: ", searchresp.name,)
    #return searchresp

def all_students():
    print("Here is a list of all the students:")
    for student in session.query(Student):
        print(student.name)
    #student_data = session.query(Student).all()
    #print(student_data)

#Or should alembic CLI commands be placed to update the schemas

#manually does not work too well since

print("Welcome to the Student tracker application")
print("\n Select what you want to do")

print("\n 1. Create Student Profile")
print("\n 2. Search Students")
print("\n 3. Show All Students")
print("\n 2. Create Assignment")
print("\n 3. View Assignments")
print("\n 4. Search Students")

task = input("Enter what you want to do: ")
print(task)
if task == 1:
    createStudent()

ipdb.set_trace()